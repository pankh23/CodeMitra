name: CodeMitra CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: codemitra_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        service: [frontend, backend, worker]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ matrix.service }}/package-lock.json'

    - name: Install Dependencies
      working-directory: ${{ matrix.service }}
      run: npm ci

    - name: Run Linting
      working-directory: ${{ matrix.service }}
      run: npm run lint

    - name: Run Type Checking
      working-directory: ${{ matrix.service }}
      run: npm run type-check

    - name: Run Tests
      working-directory: ${{ matrix.service }}
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/codemitra_test
        REDIS_URL: redis://localhost:6379

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/codemitra-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/codemitra-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push Worker
      uses: docker/build-push-action@v5
      with:
        context: ./worker
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/codemitra-worker:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push Nginx
      uses: docker/build-push-action@v5
      with:
        context: ./nginx
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/codemitra-nginx:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /opt/codemitra
          
          # Pull latest images
          docker pull ${{ secrets.DOCKER_USERNAME }}/codemitra-frontend:${{ github.sha }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/codemitra-backend:${{ github.sha }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/codemitra-worker:${{ github.sha }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/codemitra-nginx:${{ github.sha }}
          
          # Update image tags in docker-compose
          export IMAGE_TAG=${{ github.sha }}
          
          # Stop current containers
          docker-compose down
          
          # Run database migrations
          docker-compose run --rm backend npm run prisma:migrate
          
          # Start new containers
          docker-compose up -d
          
          # Health check
          sleep 30
          curl -f http://localhost/health || exit 1
          
          # Cleanup old images
          docker image prune -f

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'CodeMitra'
        path: '.'
        format: 'JSON'
        
    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/
