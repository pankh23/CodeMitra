version: '3.8'

services:
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    environment:
      - NGINX_ENV=development
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgresql://codemitra_user:secure_password@postgres:5432/codemitra_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_super_secure_jwt_secret_key_here
      - NEXTAUTH_SECRET=your_nextauth_secret_key_here
      - FRONTEND_URL=http://localhost:3000
      - BACKEND_URL=http://localhost:5001
      - WORKER_TIMEOUT=30000
      - MAX_CONCURRENT_EXECUTIONS=20
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=200
      - METRICS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Scale backend for better performance
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:5001
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:5001
    depends_on:
      - backend
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - MAX_CONCURRENT_JOBS=10
      - JOB_TIMEOUT=30000
      - METRICS_ENABLED=true
    depends_on:
      - redis
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=codemitra_dev
      - POSTGRES_USER=codemitra_user
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codemitra_user -d codemitra_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
